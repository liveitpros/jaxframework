<?php
// Copyright (c) 2011-2017 Ronald B. Cemer
// All rights reserved.
// This software is released under the BSD license.
// Please see the accompanying LICENSE.txt for details.

// This file is part of the jaxframework project.

include dirname(__FILE__).'/gen.include.php';

$usageDescription = 'Generate search includes and loader includes for table(s).';
$templatesDir = dirname($scriptDir).'/templates/search';

process();

function processTable($table, $idCol, $cfg) {
	global $ALLOWED_QUERY_OPERATORS, $ALLOWED_PS_TYPES,
		$SEARCH_PRESENTATION_DATATABLES_ONLY_PARAMS, $SEARCH_PRESENTATION_DATATABLES_ONLY_COLUMN_PARAMS,
		$SEARCH_PRESENTATION_AJAXSEARCHGRID_ONLY_PARAMS, $SEARCH_PRESENTATION_AJAXSEARCHGRID_ONLY_COLUMN_PARAMS,
		$templatesDir, $docroot, $enableLangFiles;

	$generatedFileMessage = <<<EOF
// DO NOT EDIT THIS FILE.
// This file was generated by searchgen.
// If you need to customize this file, please edit the corresponding
// yaml file in the gencfg directory, and then re-generate this file
// by running searchgen, passing in the table name.
EOF
	;

	$canDoFulltextSearchPHP = 'in_array($db->getDialect(), array(\'mysql\'))';

	$jaxInclude = $cfg['jaxInclude'];
	$jaxJQuery = $cfg['jaxJQuery'];
	$jaxJS = $cfg['jaxJS'];

// ---------------------------
// Create the search includes.
// ---------------------------


	if ((!isset($cfg['searches'])) || (!is_array($cfg['searches']))) $cfg['searches'] = array();
	foreach ($cfg['searches'] as $searchName=>$search) {

		$langKeys = array();

		$searchCommand = (isset($search['searchCommand']) && (trim($search['searchCommand']) != '')) ? trim($search['searchCommand']) : ('search'.ucfirst($searchName).'s');
		$extraSelectColumns = '';
		if (isset($search['extraSelectColumns'])) {
			if (is_array($search['extraSelectColumns'])) {
				$extraSelectColumns = implode(', ', $search['extraSelectColumns']);
			} else {
				$extraSelectColumns = trim((string)$search['extraSelectColumns']);
			}
		}

		$outputPath = (isset($search['outputPath']) && is_string($search['outputPath'])) ?
			$search['outputPath'] : '';
		if ($outputPath == '') $outputPath = 'include/search';
		$outputDir = $docroot.'/'.$outputPath;
		@mkdir($outputDir, 0777, true);

		$numDirsDeepUnderHTML = calcDirDepth($outputPath);

		if (isset($search['docRootPath'])) {
			$docRootPath = '"'.addcslashes($search['docRootPath']).'"';
		} else {
			$docRootPath = 'dirname(__FILE__)';
			for ($i = 0; $i < $numDirsDeepUnderHTML; $i++) {
				$docRootPath = "dirname({$docRootPath})";
			}
		}

		$phpIncludes = getPHPClassesAndIncludes($search, $numDirsDeepUnderHTML);

		$searchTemplate =
			((isset($search['searchTemplate'])) && (is_string($search['searchTemplate']))) ?
			$search['searchTemplate'] : '';
		if ($searchTemplate == '') $searchTemplate = 'search.include.php';

		$joins = '';
		if (isset($search['joins'])) {
			$joins = trim($search['joins']);
		}

		$arr = getWhereClauseParams($table, $searchName, $search, 'search', $langKeys);
		$haveAnyFulltextQueryOperators = $arr['haveAnyFulltextQueryOperators'];
		$searchWhereClausePHP = $arr['searchWhereClausePHP'];
		$searchWhereAssignments = $arr['searchWhereAssignments'];
		$searchableColumnsPHPArray = $arr['searchableColumnsPHPArray'];
		$searchableColumnsPHPArraySep = $arr['searchableColumnsPHPArraySep'];
		$andWhere = $arr['andWhere'];
		$andWhereAssignments = $arr['andWhereAssignments'];

		$groupBy = '';
		if (isset($search['groupBy'])) {
			$groupBy = trim((string)$search['groupBy']);
		}

		$rowProcessingPHPCode = '';
		if (isset($search['rowProcessingPHPCode'])) {
			$rowProcessingPHPCode = (string)$search['rowProcessingPHPCode'];
		}

		$unsetForbiddenColumns = array();
		if (isset($search['forbiddenColumns'])) {
			foreach ($search['forbiddenColumns'] as $colName) {
				$unsetForbiddenColumns[] = "\t\tunset(\$row->$colName);";
			}
		}

		$searchFor = array(
			'{{generatedFileMessage}}',
			'{{docRootPath}}',
			'{{jaxInclude}}',
			'{{jaxJQuery}}',
			'{{jaxJS}}',
			'{{phpIncludes}}',
			'{{searchName}}',
			'{{uSearchName}}',
			'{{tableName}}',
			'{{uTableName}}',
			'{{searchCommand}}',
			'{{searchableColumnsPHPArray}}',
			'{{idCol}}',
			'{{uIdCol}}',
			'{{extraSelectColumns}}',
			'{{joins}}',
			'{{canDoFulltextSearchPHP}}',
			'{{searchWhereClausePHP}}',
			'{{andWhere}}',
			'{{searchWhereAssignments}}',
			'{{andWhereAssignments}}',
			'{{groupBy}}',
			'{{rowProcessingPHPCode}}',
			'{{unsetForbiddenColumns}}',
		);
		$replaceWith = array(
			$generatedFileMessage,
			$docRootPath,
			$jaxInclude,
			$jaxJQuery,
			$jaxJS,
			$phpIncludes,
			$searchName,
			ucfirst($searchName),
			$table->tableName,
			ucfirst($table->tableName),
			$searchCommand,
			$searchableColumnsPHPArray,
			$idCol,
			ucfirst($idCol),
			($extraSelectColumns != '') ? (', '.$extraSelectColumns) : '',
			($joins != '') ? (' '.$joins) : '',
			$canDoFulltextSearchPHP,
			$searchWhereClausePHP,
			($andWhere != '') ? (' and ('.$andWhere.')') : '',
			implode("\n", $searchWhereAssignments),
			implode("\n", $andWhereAssignments),
			$groupBy,
			$rowProcessingPHPCode,
			implode("\n", $unsetForbiddenColumns),
		);
		$content = str_replace(
			$searchFor,
			$replaceWith,
			filterFullTextSearchCode(
				file_get_contents($templatesDir.'/'.$searchTemplate),
				$haveAnyFulltextQueryOperators
			)
		);
		$fn = $outputDir.'/'.$searchName.'_search.include.php';
		if ((!file_exists($fn)) || (file_get_contents($fn) != $content)) {
			file_put_contents($fn, $content);
		}

		if ($enableLangFiles) {
			$langfn = $outputDir.'/'.$searchName.'_search.include.php.strings';
			$langResources = loadLangResourceFileContents($langfn);
			$anyResourcesChanged = false;
			foreach ($langKeys as $key=>$val) {
				if (getLangResource($langResources, $key) != $val) {
					setLangResource($langResources, $key, $val);
					$anyResourcesChanged = true;
				}
			}
			if ($anyResourcesChanged) {
				saveLangResourceFileContents($langfn, $langResources);
			}
		}
	}	// foreach ($cfg['searches'] as $searchName=>$search)


// ---------------------------------------
// Create the autcomplete search includes.
// ---------------------------------------


	if ((!isset($cfg['autocompleteSearches'])) || (!is_array($cfg['autocompleteSearches']))) $cfg['autocompleteSearches'] = array();
	foreach ($cfg['autocompleteSearches'] as $searchName=>$search) {

		$langKeys = array();

		$searchCommand = (isset($search['searchCommand']) && (trim($search['searchCommand']) != '')) ? trim($search['searchCommand']) : ('autocomplete'.ucfirst($searchName).'s');
		$extraSelectColumns = '';
		if (isset($search['extraSelectColumns'])) {
			if (is_array($search['extraSelectColumns'])) {
				$extraSelectColumns = implode(', ', $search['extraSelectColumns']);
			} else {
				$extraSelectColumns = trim((string)$search['extraSelectColumns']);
			}
		}

		$outputPath = (isset($search['outputPath']) && is_string($search['outputPath'])) ?
			$search['outputPath'] : '';
		if ($outputPath == '') $outputPath = 'include/search';
		$outputDir = $docroot.'/'.$outputPath;
		@mkdir($outputDir, 0777, true);

		$numDirsDeepUnderHTML = calcDirDepth($outputPath);

		if (isset($search['docRootPath'])) {
			$docRootPath = '"'.addcslashes($search['docRootPath']).'"';
		} else {
			$docRootPath = 'dirname(__FILE__)';
			for ($i = 0; $i < $numDirsDeepUnderHTML; $i++) {
				$docRootPath = "dirname({$docRootPath})";
			}
		}

		$phpIncludes = getPHPClassesAndIncludes($search, $numDirsDeepUnderHTML);

		$searchTemplate =
			((isset($search['searchTemplate'])) && (is_string($search['searchTemplate']))) ?
			$search['searchTemplate'] : '';
		if ($searchTemplate == '') $searchTemplate = 'autocomplete.include.php';

		$idColumn = ((isset($search['idColumn'])) && (is_string($search['idColumn']))) ? $search['idColumn'] : $idCol;
		$idColumnPSType = ((isset($search['idColumnPSType'])) && (is_string($search['idColumnPSType']))) ?
			$search['idColumnPSType'] : 'int';
		if (!in_array($idColumnPSType, $ALLOWED_PS_TYPES)) {
			fprintf(STDERR, "Invalid idColumnPSType \"%s\" in autocompleteSearches.", $idColumnPSType);
			return false;
		}
		switch ($idColumnPSType) {
		case 'boolean':
		case 'int':
			$getIdParam = sprintf("\t\t\$%s = isset(\$params['%s']) ? (int)trim(\$params['%s']) : 0;", $idColumn, $idColumn, $idColumn);
			break;
		case 'float':
			$getIdParam = sprintf("\t\t\$%s = isset(\$params['%s']) ? (float)trim(\$params['%s']) : 0;", $idColumn, $idColumn, $idColumn);
			break;
		case 'double':
			$getIdParam = sprintf("\t\t\$%s = isset(\$params['%s']) ? (double)trim(\$params['%s']) : 0;", $idColumn, $idColumn, $idColumn);
			break;
		case 'string':
		case 'match':
		case 'binary':
		default:
			$getIdParam = sprintf("\t\t\$%s = isset(\$params['%s']) ? (string)\$params['%s'] : '';", $idColumn, $idColumn, $idColumn);
			break;
		}

		$altIdColumn = ((isset($search['altIdColumn'])) && (is_string($search['altIdColumn']))) ? $search['altIdColumn'] : '';
		if ($altIdColumn != '') {
			$altIdColumnPSType = ((isset($search['altIdColumnPSType'])) && (is_string($search['altIdColumnPSType']))) ?
				$search['altIdColumnPSType'] : 'int';
			if (!in_array($altIdColumnPSType, $ALLOWED_PS_TYPES)) {
				fprintf(STDERR, "Invalid altIdColumnPSType \"%s\" in autocompleteSearches.", $altIdColumnPSType);
				return false;
			}
			switch ($altIdColumnPSType) {
			case 'boolean':
			case 'int':
				$getAltIdParam = sprintf("\t\$%s = isset(\$params['%s']) ? (int)trim(\$params['%s']) : null;", $altIdColumn, $altIdColumn, $altIdColumn);
				break;
			case 'float':
				$getAltIdParam = sprintf("\t\$%s = isset(\$params['%s']) ? (float)trim(\$params['%s']) : null;", $altIdColumn, $altIdColumn, $altIdColumn);
				break;
			case 'double':
				$getAltIdParam = sprintf("\t\$%s = isset(\$params['%s']) ? (double)trim(\$params['%s']) : null;", $altIdColumn, $altIdColumn, $altIdColumn);
				break;
			case 'string':
			case 'match':
			case 'binary':
			default:
				$getAltIdParam = sprintf("\t\$%s = isset(\$params['%s']) ? (string)\$params['%s'] : null;", $altIdColumn, $altIdColumn, $altIdColumn);
				break;
			}
		} else {
			$altIdColumnPSType = '';
			$getAltIdParam = '';
		}

		$joins = '';
		if (isset($search['joins'])) {
			$joins = trim($search['joins']);
		}

		$dummyLangKeys = array();
		$arr = getWhereClauseParams($table, $searchName, $search, 'autocomplete', $dummyLangKeys);
		unset($dummyLangKeys);
		$haveAnyFulltextQueryOperators = $arr['haveAnyFulltextQueryOperators'];
		$searchWhereClausePHP = $arr['searchWhereClausePHP'];
		$searchWhereAssignments = $arr['searchWhereAssignments'];
		$andWhere = $arr['andWhere'];
		$andWhereAssignments = $arr['andWhereAssignments'];

		$searchResultLabelExpression = isset($search['searchResultLabelExpression']) ?
			trim($search['searchResultLabelExpression']) : '';
		$searchResultValueExpression = isset($search['searchResultValueExpression']) ?
			trim($search['searchResultValueExpression']) :
			('$row->'.$idColumn);

		$searchFor = array(
			'{{generatedFileMessage}}',
			'{{docRootPath}}',
			'{{jaxInclude}}',
			'{{jaxJQuery}}',
			'{{jaxJS}}',
			'{{phpIncludes}}',
			'{{searchName}}',
			'{{uSearchName}}',
			'{{tableName}}',
			'{{uTableName}}',
			'{{searchCommand}}',
			'{{idCol}}',
			'{{uIdCol}}',
			'{{idColumnPSType}}',
			'{{uIdColumnPSType}}',
			'{{getIdParam}}',
			'{{altIdCol}}',
			'{{uAltIdCol}}',
			'{{altIdColumnPSType}}',
			'{{uAltIdColumnPSType}}',
			'{{getAltIdParam}}',
			'{{extraSelectColumns}}',
			'{{joins}}',
			'{{canDoFulltextSearchPHP}}',
			'{{searchWhereClausePHP}}',
			'{{andWhere}}',
			'{{searchWhereAssignments}}',
			'{{andWhereAssignments}}',
			'{{searchResultLabelExpression}}',
			'{{searchResultValueExpression}}',
		);
		$replaceWith = array(
			$generatedFileMessage,
			$docRootPath,
			$jaxInclude,
			$jaxJQuery,
			$jaxJS,
			$phpIncludes,
			$searchName,
			ucfirst($searchName),
			$table->tableName,
			ucfirst($table->tableName),
			$searchCommand,
			$idColumn,
			ucfirst($idColumn),
			$idColumnPSType,
			ucfirst($idColumnPSType),
			$getIdParam,
			$altIdColumn,
			ucfirst($altIdColumn),
			$altIdColumnPSType,
			ucfirst($altIdColumnPSType),
			$getAltIdParam,
			($extraSelectColumns != '') ? (', '.$extraSelectColumns) : '',
			($joins != '') ? (' '.$joins) : '',
			$canDoFulltextSearchPHP,
			$searchWhereClausePHP,
			($andWhere != '') ? (' and ('.$andWhere.')') : '',
			implode("\n", $searchWhereAssignments),
			implode("\n", $andWhereAssignments),
			$searchResultLabelExpression,
			$searchResultValueExpression,
		);
		$content = str_replace(
			$searchFor,
			$replaceWith,
			filterAltIdAutocompleteCode(
				filterFullTextSearchCode(
					file_get_contents($templatesDir.'/'.$searchTemplate),
					$haveAnyFulltextQueryOperators
				),
				($altIdColumn != '')
			)
		);
		$fn = $outputDir.'/'.$searchName.'_autocomplete.include.php';
		if ((!file_exists($fn)) || (file_get_contents($fn) != $content)) {
			file_put_contents($fn, $content);
		}

		if ($enableLangFiles) {
			$langfn = $outputDir.'/'.$searchName.'_autocomplete.include.php.strings';
			$langResources = loadLangResourceFileContents($langfn);
			$anyResourcesChanged = false;
			foreach ($langKeys as $key=>$val) {
				if (getLangResource($langResources, $key) != $val) {
					setLangResource($langResources, $key, $val);
					$anyResourcesChanged = true;
				}
			}
			if ($anyResourcesChanged) {
				saveLangResourceFileContents($langfn, $langResources);
			}
		}
	}	// foreach ($cfg['autocompleteSearches'] as $searchName=>$search)


// -----------------------------------------
// Create the popup search JavaScript files.
// -----------------------------------------


	if ((!isset($cfg['popupSearches'])) || (!is_array($cfg['popupSearches']))) {
		$cfg['popupSearches'] = array();
	}
	foreach ($cfg['popupSearches'] as $popupSearchName=>$popupSearch) {
		if (!is_array($popupSearch)) continue;

		// If we encounter a "likePopupSearch" attribute for this popupSearch, it must
		// reference an existing popupSearch defined in the same YAML file, which may
		// or may not reference another popupSearch.  Circular references are not allowed.
		// When this happens, we merge the referenced popupSearch's attributes with this
		// popupSearch's attributes, allowing this popupSearch's attributes to override
		// the referenced popupSearch's attributes of the same name.
		$referencedPopupSearchNames = array();
		while (isset($popupSearch['likePopupSearch'])) {
			if ((!is_string($popupSearch['likePopupSearch'])) ||
				(!isset($cfg['popupSearches'])) ||
				(!isset($cfg['popupSearches'][$popupSearch['likePopupSearch']])) ||
				(!is_array($cfg['popupSearches'][$popupSearch['likePopupSearch']]))) {
				fprintf(STDERR, "Invalid likePopupSearch entry in popupSearch/* section.\n");
				return false;
			}
			$referencedPopupSearchName = $popupSearch['likePopupSearch'];
			unset($popupSearch['likePopupSearch']);
			if (in_array($referencedPopupSearchName, $referencedPopupSearchNames)) {
				fprintf(STDERR, "Circular reference in likePopupSearch: %s.\n", implode('->', $referencedPopupSearchNames));
				return false;
			}
			$referencedPopupSearchNames[] = $referencedPopupSearchName;
			$popupSearch = array_merge($cfg['popupSearches'][$referencedPopupSearchName], $popupSearch);
		}
		unset($referencedPopupSearchNames, $referencedPopupSearchName);

		$langKeys = array();

		$langKeys['popupSearch.'.$popupSearchName.'.tableDescription'] = $cfg['tableDescription'];
		$langKeys['popupSearch.'.$popupSearchName.'.tableDescriptions'] = $cfg['tableDescriptions'];

		$outputPath = (isset($popupSearch['outputPath']) && is_string($popupSearch['outputPath'])) ?
			$popupSearch['outputPath'] : '';
		if ($outputPath == '') $outputPath = 'js/search';
		$outputDir = $docroot.'/'.$outputPath;
		@mkdir($outputDir, 0777, true);

		$popupSearchTemplate =
			((isset($popupSearch['popupSearchTemplate'])) && (is_string($popupSearch['popupSearchTemplate']))) ?
			$popupSearch['popupSearchTemplate'] : '';
		if ($popupSearchTemplate == '') $popupSearchTemplate = 'popupSearch.js';


		if ((!isset($popupSearch['searchCommand'])) || (!is_string($popupSearch['searchCommand']))) {
			continue;
		}
		$searchCommand = $popupSearch['searchCommand'];

		if (isset($popupSearch['searchPresentation']) && is_string($popupSearch['searchPresentation'])) {
			$searchPresentation = $popupSearch['searchPresentation'];
			if (($searchPresentation != 'dataTables') && ($searchPresentation != 'AJAXSearchGrid')) {
				$searchPresentation = 'dataTables';
			}
		} else {
			$searchPresentation = 'dataTables';
		}

		if ($searchPresentation != 'dataTables') {
			$badattrs = array_intersect(array_keys($popupSearch), $SEARCH_PRESENTATION_DATATABLES_ONLY_PARAMS);
			if (!empty($badattrs)) {
				fprintf(STDERR, "WARNING: The following popup search / CRUD search attributes are ignored when searchPresentation is not set to dataTables:\n    %s\n", implode("\n    ", $badattrs));
			}
		}
		if ($searchPresentation != 'AJAXSearchGrid') {
			$badattrs = array_intersect(array_keys($popupSearch), $SEARCH_PRESENTATION_AJAXSEARCHGRID_ONLY_PARAMS);
			if (!empty($badattrs)) {
				fprintf(STDERR, "WARNING: The following popup search / CRUD search attributes are ignored when searchPresentation is not set to AJAXSearchGrid:\n    %s\n", implode("\n    ", $badattrs));
			}
		}
		$badcolattrs_dataTables = array();
		$badcolattrs_AJAXSearchGrid = array();
		if (isset($popupSearch['columns']) && is_array($popupSearch['columns'])) {
			foreach ($popupSearch['columns'] as $col) {
				if ($searchPresentation != 'dataTables') {
					$badattrs = array_intersect(array_keys($col), $SEARCH_PRESENTATION_DATATABLES_ONLY_COLUMN_PARAMS);
					if (!empty($badattrs)) {
						$badcolattrs_dataTables = array_unique(array_merge($badcolattrs_dataTables, $badattrs));
					}
				}
				if ($searchPresentation != 'AJAXSearchGrid') {
					$badattrs = array_intersect(array_keys($col), $SEARCH_PRESENTATION_AJAXSEARCHGRID_ONLY_COLUMN_PARAMS);
					if (!empty($badattrs)) {
						$badcolattrs_AJAXSearchGrid = array_unique(array_merge($badcolattrs_AJAXSearchGrid, $badattrs));
					}
				}
			}
			unset($col);
		}
		if (!empty($badcolattrs_dataTables)) {
			fprintf(STDERR, "WARNING: The following popup search / CRUD search column attributes are ignored when searchPresentation is not set to dataTables:\n    %s\n", implode("\n    ", $badcolattrs_dataTables));
		}
		if (!empty($badcolattrs_AJAXSearchGrid)) {
			fprintf(STDERR, "WARNING: The following popup search / CRUD search column attributes are ignored when searchPresentation is not set to AJAXSearchGrid:\n    %s\n", implode("\n    ", $badcolattrs_AJAXSearchGrid));
		}
		unset($badattrs, $badcolattrs_dataTables, $badcolattrs_AJAXSearchGrid);

		if (!isset($popupSearch['idColumn'])) {
			fprintf(STDERR, "Missing idColumn on popupSearch %s.  Skipping this popupSearch.\n", $popupSearchName);
			continue;
		}

		$idColumn = $popupSearch['idColumn'];

		$beforeSearchCallback = isset($popupSearch['beforeSearchCallback']) ? $popupSearch['beforeSearchCallback'] : '';
		$modifyURLCallback = isset($popupSearch['modifyURLCallback']) ? $popupSearch['modifyURLCallback'] : '';
		$afterSearchCallback = isset($popupSearch['afterSearchCallback']) ? $popupSearch['afterSearchCallback'] : '';

		$popupSearchCallbacks = '';
		if ($beforeSearchCallback != '') {
			$popupSearchCallbacks .= ",\n\t\tbeforeSearchCallback:$beforeSearchCallback";
		}
		if ($modifyURLCallback != '') {
			$popupSearchCallbacks .= ",\n\t\tmodifyURLCallback:$modifyURLCallback";
		}
		if ($afterSearchCallback != '') {
			$popupSearchCallbacks .= ",\n\t\tafterSearchCallback:$afterSearchCallback";
		}

		$rowSelectJavaScriptCallbackFunction = isset($popupSearch['rowSelectJavaScriptCallbackFunction']) ? $popupSearch['rowSelectJavaScriptCallbackFunction'] : '';

		if ((!isset($popupSearch['columns'])) || (!is_array($popupSearch['columns']))) {
			fprintf(STDERR, "Missing or invalid columns list on popupSearch %s.  Skipping this popupSearch.\n", $popupSearchName);
			continue;
		}

		$popupSearchColumns = getDataTableColumns($popupSearch['columns'], 'popupSearch.'.$popupSearchName, $langKeys);
		$popupSearchColumnNames = is_array($popupSearch['columns']) ? array_keys($popupSearch['columns']) : array();
		if (isset($popupSearch['invisibleColumns']) && is_array($popupSearch['invisibleColumns'])) {
			foreach ($popupSearch['invisibleColumns'] as $icn) {
				if (!in_array($icn, $popupSearchColumnNames)) $popupSearchColumnNames[] = $icn;
			}
		}

		$popupSearchColumnFilters = (isset($popupSearch['columnFilters']) && is_array($popupSearch['columnFilters'])) ? $popupSearch['columnFilters'] : array();
		$tmp = '{';
		$sep = '';
		foreach ($popupSearchColumnFilters as $funcname=>$functext) {
			$tmp .= $sep.json_encode($funcname).':'.$functext;
			if ($sep == '') $sep = ',';
		}
		$tmp .= '}';
		$popupSearchColumnFilters = $tmp;
		unset($tmp);

		$popupSearchExtraQueryParams = (isset($popupSearch['extraQueryParams']) && is_array($popupSearch['extraQueryParams'])) ? (object)$popupSearch['extraQueryParams'] : (object)array();

		$popupSearchDefaultSorts = (isset($popupSearch['defaultSorts']) && is_array($popupSearch['defaultSorts'])) ? $popupSearch['defaultSorts'] : array();

		$actionsLangKey = 'popupSearch.'.$popupSearchName.'.actions';
		$actionsText = 'Actions';
		$langKeys[$actionsLangKey] = $actionsText;

		$selectLangKey = 'popupSearch.'.$popupSearchName.'.select';
		$selectText = 'Select';
		$langKeys[$selectLangKey] = $selectText;

		list($popupSearchGridHeaderColumnsHTML, $popupSearchGridBodyColumnsHTML) = getAJAXSearchGridColumns($popupSearch['columns'], 'popupSearch.'.$popupSearchName, $langKeys);

		$popupSearchGridHeaderColumnsHTML .= sprintf(
			"<th><<langkey>>%s<</langkey>></th>\n",
			$actionsLangKey
		);

		$popupSearchGridBodyColumnsHTML .= sprintf(
			"<td><a href=\"#\" ng-click=\"rowSelectLinkClicked(i, rows[i], \$event)\"><<langkey>>%s<</langkey>></a></td>\n"
			,$selectLangKey
		);

		$popupSearchGridHeaderColumnsHTMLJSON = json_encode($popupSearchGridHeaderColumnsHTML);
		$popupSearchGridBodyColumnsHTMLJSON = json_encode($popupSearchGridBodyColumnsHTML);

		$srch = array();
		$repl = array();
		foreach ($langKeys as $langKey=>$text) {
			$srch[] = '<<langkey>>'.$langKey.'<<\\/langkey>>';		// special escaping, since we're working with JSON
			$repl[] = '"+_t('.var_export_normal_precision($langKey, true).', '.var_export_normal_precision($text, true).')+"';
		}

		$popupSearchGridHeaderColumnsHTMLJSON = str_replace($srch, $repl, $popupSearchGridHeaderColumnsHTMLJSON);
		$popupSearchGridBodyColumnsHTMLJSON = str_replace($srch, $repl, $popupSearchGridBodyColumnsHTMLJSON);

		$rowSelectCallbackCode = '';
		if ($rowSelectJavaScriptCallbackFunction != '') {
			// Note the '+ and +' around $idColumn.  This is intended to be part of
			// a JavaScript string contcatenation which is building the html variable
			// to be returned for the actions table column.
			$rowSelectCallbackCode .= "if (typeof($rowSelectJavaScriptCallbackFunction) == \\'function\\') { $rowSelectJavaScriptCallbackFunction('+{$idColumn}+'); }; ";
		}
		$rowSelectCode =
			"if (activePopupSearch != null) { activePopupSearch.rowSelected(activePopupSearch.dataTable.fnGetData('+oObj.iDataRow+')); }; " .
			$rowSelectCallbackCode .
			"if (activePopupSearch != null) { activePopupSearch.hide(); }; return false;";

		if ($popupSearchColumns != '') $popupSearchColumns .= ",\n";
		$popupSearchColumns .=
			"\t\t{ sName:'actions', sTitle:_t('".$actionsLangKey."', '".$actionsText."'), aTargets:[ci++], bSortable:false, bUseRendered:false, sType:'html', sClass:'center nowrap', fnRender:function(oObj) {\n".
			"\t\t\tvar {$idColumn} = parseInt(oObj.aData[findDataTableColIdx({$popupSearchName}_aoColumnDefs, '{$idColumn}')]) || 0;\n".
			"\t\t\tvar html = '<a href=\"#\" onclick=\"{$rowSelectCode}\">'+_t('".$selectLangKey."', '".$selectText."')+'</a>';\n".
			"\t\t\treturn html;\n".
			"\t\t}}\n";

		unset($rowSelectCallbackCode, $rowSelectCode);

		$popupSearchTableCallbacks = '';
		if (isset($popupSearch['fnDrawCallback']) && is_string($popupSearch['fnDrawCallback'])) {
			$s = trim($popupSearch['fnDrawCallback']);
			if ($s != '') $popupSearchTableCallbacks .= ', fnDrawCallback: '.$s;
			unset($s);
		}
		if (isset($popupSearch['fnServerData']) && is_string($popupSearch['fnServerData'])) {
			$s = trim($popupSearch['fnServerData']);
			if ($s != '') $popupSearchTableCallbacks .= ', fnServerData: '.$s;
			unset($s);
		}

		// Create the popup search JS file.
		$searchFor = array(
			'{{generatedFileMessage}}',
			'{{popupSearchName}}',
			'{{popupSearchColumns}}',
			'{{popupSearchGridHeaderColumnsHTMLJSON}}',
			'{{popupSearchGridBodyColumnsHTMLJSON}}',
			'{{popupSearchColumnNamesJSON}}',
			'{{popupSearchColumnFilters}}',
			'{{popupSearchExtraQueryParamsJSON}}',
			'{{popupSearchDefaultSortsJSON}}',
			'{{popupSearchTableCallbacks}}',
			'{{searchCommand}}',
			'{{idColumn}}',
			'{{idColumnJSON}}',
			'{{popupSearchCallbacks}}',
			'{{rowSelectJavaScriptCallbackFunction}}',
			'{{rowSelectJavaScriptCallbackFunctionJSON}}',
		);
		$replaceWith = array(
			$generatedFileMessage,
			$popupSearchName,
			$popupSearchColumns,
			$popupSearchGridHeaderColumnsHTMLJSON,
			$popupSearchGridBodyColumnsHTMLJSON,
			json_encode($popupSearchColumnNames),
			$popupSearchColumnFilters,
			json_encode($popupSearchExtraQueryParams),
			json_encode($popupSearchDefaultSorts),
			$popupSearchTableCallbacks,
			$searchCommand,
			$idColumn,
			json_encode($idColumn),
			$popupSearchCallbacks,
			$rowSelectJavaScriptCallbackFunction,
			json_encode($rowSelectJavaScriptCallbackFunction)
		);
		$content = str_replace(
			$searchFor,
			$replaceWith,
			filterSearchPresentation(
				file_get_contents($templatesDir.'/'.$popupSearchTemplate),
				$searchPresentation
			)
		);
		$fn = $outputDir.'/'.$popupSearchName.'.js';
		if ((!file_exists($fn)) || (file_get_contents($fn) != $content)) {
			file_put_contents($fn, $content);
		}

		if ($enableLangFiles) {
			$langfn = $outputDir.'/'.$popupSearchName.'.js.strings';
			$langResources = loadLangResourceFileContents($langfn);
			$anyResourcesChanged = false;
			foreach ($langKeys as $key=>$val) {
				if (getLangResource($langResources, $key) != $val) {
					setLangResource($langResources, $key, $val);
					$anyResourcesChanged = true;
				}
			}
			if ($anyResourcesChanged) {
				saveLangResourceFileContents($langfn, $langResources);
			}
		}
	}	// foreach ($cfg['popupSearches'] as $popupSearchName=>$popupSearch)


// ---------------------------
// Create the loader includes.
// ---------------------------


	if ((!isset($cfg['loaders'])) || (!is_array($cfg['loaders']))) $cfg['loaders'] = array();
	foreach ($cfg['loaders'] as $loaderName=>$loader) {
		$outputPath = (isset($loader['outputPath']) && is_string($loader['outputPath'])) ?
			$loader['outputPath'] : '';
		if ($outputPath == '') $outputPath = 'include/search';
		$outputDir = $docroot.'/'.$outputPath;
		@mkdir($outputDir, 0777, true);

		$numDirsDeepUnderHTML = calcDirDepth($outputPath);

		if (isset($loader['docRootPath'])) {
			$docRootPath = '"'.addcslashes($loader['docRootPath']).'"';
		} else {
			$docRootPath = 'dirname(__FILE__)';
			for ($i = 0; $i < $numDirsDeepUnderHTML; $i++) {
				$docRootPath = "dirname({$docRootPath})";
			}
		}

		$phpIncludes = getPHPClassesAndIncludes($loader, $numDirsDeepUnderHTML);

		$searchCommand = (isset($loader['searchCommand']) && (trim($loader['searchCommand']) != '')) ? trim($loader['searchCommand']) : ('load'.ucfirst($loaderName));

		$loaderTemplate =
			((isset($loader['loaderTemplate'])) && (is_string($loader['loaderTemplate']))) ?
			$loader['loaderTemplate'] : '';
		if ($loaderTemplate == '') $loaderTemplate = 'load.include.php';

		$idColumn = ((isset($loader['idColumn'])) && (is_string($loader['idColumn']))) ?
			$loader['idColumn'] : $idCol;

		$idColumnPSType = ((isset($loader['idColumnPSType'])) && (is_string($loader['idColumnPSType']))) ?
			$loader['idColumnPSType'] : 'int';
		if (!in_array($idColumnPSType, $ALLOWED_PS_TYPES)) $idColumnPSType = 'int';
		switch ($idColumnPSType) {
		case 'boolean':
		case 'int':
			$getIdParam = sprintf("\t\$%s = isset(\$params['%s']) ? (int)trim(\$params['%s']) : 0;", $idColumn, $idColumn, $idColumn);
			if ($idColumnPSType == 'boolean') {
				$emptyIdCheck = sprintf('($%s < 0)', $idColumn);
			} else {
				$emptyIdCheck = sprintf('($%s <= 0)', $idColumn);
			}
			break;
		case 'float':
			$getIdParam = sprintf("\t\$%s = isset(\$params['%s']) ? (float)trim(\$params['%s']) : 0;", $idColumn, $idColumn, $idColumn);
			$emptyIdCheck = sprintf('($%s <= 0.0)', $idColumn);
			break;
		case 'double':
			$getIdParam = sprintf("\t\$%s = isset(\$params['%s']) ? (double)trim(\$params['%s']) : 0;", $idColumn, $idColumn, $idColumn);
			$emptyIdCheck = sprintf('($%s <= 0.0)', $idColumn);
			break;
		case 'string':
		case 'match':
		case 'binary':
		default:
			$getIdParam = sprintf("\t\$%s = isset(\$params['%s']) ? (string)\$params['%s'] : '';", $idColumn, $idColumn, $idColumn);
			$emptyIdCheck = sprintf("($%s == '')", $idColumn);
			break;
		}

		$andWhere = '';
		if (isset($loader['andWhere'])) {
			$andWhere = trim((string)$loader['andWhere']);
		}
		$andWhereAssignments = array();
		if (isset($loader['andWhereAssignments']) && is_array($loader['andWhereAssignments'])) {
			foreach ($loader['andWhereAssignments'] as $assignment) {
				$expression = (isset($assignment['expression']) && is_string($assignment['expression'])) ?
					$assignment['expression'] : "''";
				switch (isset($assignment['psType']) ? $assignment['psType'] : 'string') {
				case 'boolean':
					$andWhereAssignments[] = "\t\$ps->setBoolean($expression);";
					break;
				case 'int':
					$andWhereAssignments[] = "\t\$ps->setInt($expression);";
					break;
				case 'float':
					$andWhereAssignments[] = "\t\$ps->setFloat($expression);";
					break;
				case 'double':
					$andWhereAssignments[] = "\t\$ps->setDouble($expression);";
					break;
				case 'string':
				default:
					$andWhereAssignments[] = "\t\$ps->setString($expression);";
					break;
				case 'match':
					$andWhereAssignments[] = "\t\$ps->setString('%'.$expression.'%');";
					break;
				case 'binary':
					$andWhereAssignments[] = "\t\$ps->setBinary($expression);";
					break;
				}
			}
		}

		$initRelationDAOs = array();
		$loadRelations = array();
		$psidx = 0;
		$psInitCode = array();
		if (isset($loader['relations'])) {
			foreach ($loader['relations'] as $relationName=>$relation) {
				$rtn = $relation['table'];
				$urtn = ucfirst($rtn);

				$useDAO = ((!isset($relation['useDAO'])) || ($relation['useDAO'])) ? true : false;
				if (($useDAO) || (!isset($relation['sqlQuery']))) {
					$initRelationDAOs[] = "\t\${$rtn}DAO = new {$urtn}DAO(\$db);";
				}

				$relationType = isset($relation['relationType']) ? $relation['relationType'] : 'many';
				if (($relationType != 'one') && ($relationType != 'many')) $relationType = 'many';

				$offset = isset($relation['offset']) ? (int)$relation['offset'] : 0;
				if ($offset < 0) $offset = 0;
				if ($relationType == 'one') {
					$limit = 1;
				} else {
					$limit = isset($relation['limit']) ? (int)$relation['limit'] : 0;
					if ($limit < 0) $limit = 0;
				}

				$code = '';

				if (isset($relation['sqlQuery'])) {
					// Retrieve the row(s) using an SQL query.
					$psidx++;
					$psInitCode[] = "\t\$ps{$psidx} = new PreparedStatement(<<<EOF\n{$relation['sqlQuery']}\nEOF\n\t, $offset, $limit);\n";
					$code .= "\t\t\$ps{$psidx}->clearParams();\n";
					if (isset($relation['sqlQueryAssignments']) &&
						is_array($relation['sqlQueryAssignments'])) {
						foreach ($relation['sqlQueryAssignments'] as $assignment) {
							$expression =
								(isset($assignment['expression']) &&
									is_string($assignment['expression'])) ?
								$assignment['expression'] : "''";
							switch (isset($assignment['psType']) ?
								$assignment['psType'] : 'string') {
							case 'boolean':
								$code .= "\t\t\$ps{$psidx}->setBoolean($expression);\n";
								break;
							case 'int':
								$code .= "\t\t\$ps{$psidx}->setInt($expression);\n";
								break;
							case 'float':
								$code .= "\t\t\$ps{$psidx}->setFloat($expression);\n";
								break;
							case 'double':
								$code .= "\t\t\$ps{$psidx}->setDouble($expression);\n";
								break;
							case 'string':
							default:
								$code .= "\t\t\$ps{$psidx}->setString($expression);\n";
								break;
							case 'match':
								$code .= "\t\t\$ps{$psidx}->setString('%'.$expression.'%');\n";
								break;
							case 'binary':
								$code .= "\t\t\$ps{$psidx}->setBinary($expression);\n";
								break;
							}
						}
					}
					$code .= "\t\t";

					if ($relationType == 'one') {
						$code .= '$relRows = '.$emptyIdCheck.' ? array() : ';
					} else {
						$code .= '$row->'.$relationName.' = '.$emptyIdCheck.' ? array() : ';
					}
					if ($useDAO) {
						$code .= '$'.$rtn."DAO->findWithPreparedStatement(\$ps{$psidx});\n";
					} else {
						$code .= "\$db->fetchAllObjects(\$db->executeQuery(\$ps{$psidx}), true);\n";
					}
					if ($relationType == 'one') {
						$code .= "\t\t\$row->$relationName = empty(\$relRows) ? null : \$relRows[0];";
						$code .= "\t\tunset(\$relRows);";
					}
				} else {
					$queryOperator = isset($relation['queryOperator']) ? $relation['queryOperator'] : '=';
					if (!in_array($queryOperator, $ALLOWED_QUERY_OPERATORS)) $queryOperator = '=';

					$local = isset($relation['local']) ? $relation['local'] : '';
					if ($local == '') continue;

					$foreign = isset($relation['foreign']) ? $relation['foreign'] : '';
					if ($foreign == '') continue;

					$orderBy = isset($relation['orderBy']) ? $relation['orderBy'] : '';
					if ($orderBy == '') $orderBy = $foreign;

					if (!$useDAO) {
						$psidx++;
						$code .= '\t\t$ps{$psidx} = '.$rtn.'DAO->findBy'.ucfirst($foreign).'PS($row->'.$local.', \''.$queryOperator.'\', \''.$orderBy.'\', '.$offset.', '.$limit.');';
					}

					$code .= "\t\t";
					if ($relationType == 'one') {
						$code .= '$relRows = '.$emptyIdCheck.' ? array() : ';
					} else {
						$code .= '$row->'.$relationName.' = '.$emptyIdCheck.' ? array() : ';
					}
					if ($useDAO) {
						$code .= '$'.$rtn.'DAO->findBy'.ucfirst($foreign).'($row->'.$local.', \''.$queryOperator.'\', \''.$orderBy.'\', '.$offset.', '.$limit.');';
					} else {
						$code .= "\$$db->fetchAllObjects(\$db->executeQuery(\$ps{$psidx}), true);\n";
					}
					if ($relationType == 'one') {
						$code .= "\n\t\t\$row->$relationName = empty(\$relRows) ? null : \$relRows[0];";
						$code .= "\n\t\tunset(\$relRows);";
					}
				}

				if (empty($loadRelations)) $loadRelations[] = "\tforeach (\$rows as &\$row) {";
				$loadRelations[] = $code;
			}
			if (!empty($loadRelations)) $loadRelations[] = "\t}\n\tunset(\$row);";
			if (!empty($psInitCode)) $loadRelations = array_merge($psInitCode, $loadRelations);
		}

		$rowProcessingPHPCode = '';
		if (isset($loader['rowProcessingPHPCode'])) {
			$rowProcessingPHPCode = (string)$loader['rowProcessingPHPCode'];
			if (trim($rowProcessingPHPCode) != '') {
				$rowProcessingPHPCode = <<<EOF
	foreach (\$rows as &\$row) {
$rowProcessingPHPCode
	}
	unset(\$row); // release reference to last element

EOF;
			} else {
				$rowProcessingPHPCode = '';
			}
		}

		$unsetForbiddenColumns = array();
		if (isset($loader['forbiddenColumns'])) {
			foreach ($loader['forbiddenColumns'] as $colName) {
				if (empty($unsetForbiddenColumns)) $unsetForbiddenColumns[] = "\tforeach (\$rows as &\$row) {";
				$unsetForbiddenColumns[] = "\t\tunset(\$row->$colName);";
			}
			if (!empty($unsetForbiddenColumns)) $unsetForbiddenColumns[] = "\t}\n\tunset(\$row);";
		}

		// Create the loader include.
		$searchFor = array(
			'{{generatedFileMessage}}',
			'{{docRootPath}}',
			'{{jaxInclude}}',
			'{{jaxJQuery}}',
			'{{jaxJS}}',
			'{{phpIncludes}}',
			'{{loaderName}}',
			'{{uLoaderName}}',
			'{{tableName}}',
			'{{uTableName}}',
			'{{searchCommand}}',
			'{{idCol}}',
			'{{uIdCol}}',
			'{{idColumnPSType}}',
			'{{uIdColumnPSType}}',
			'{{getIdParam}}',
			'{{emptyIdCheck}}',
			'{{andWhere}}',
			'{{andWhereAssignments}}',
			'{{initRelationDAOs}}',
			'{{loadRelations}}',
			'{{rowProcessingPHPCode}}',
			'{{unsetForbiddenColumns}}',
		);
		$replaceWith = array(
			$generatedFileMessage,
			$docRootPath,
			$jaxInclude,
			$jaxJQuery,
			$jaxJS,
			$phpIncludes,
			$loaderName,
			ucfirst($loaderName),
			$table->tableName,
			ucfirst($table->tableName),
			$searchCommand,
			$idColumn,
			ucfirst($idColumn),
			$idColumnPSType,
			ucfirst($idColumnPSType),
			$getIdParam,
			$emptyIdCheck,
			($andWhere != '') ? (' and ('.$andWhere.')') : '',
			implode("\n", $andWhereAssignments),
			implode("\n", $initRelationDAOs),
			(!empty($loadRelations)) ? implode("\n", $loadRelations) : '',
			$rowProcessingPHPCode,
			implode("\n", $unsetForbiddenColumns),
		);
		$content = str_replace(
			$searchFor,
			$replaceWith,
			file_get_contents($templatesDir.'/'.$loaderTemplate)
		);
		$fn = $outputDir.'/'.$loaderName.'_load.include.php';
		if ((!file_exists($fn)) || (file_get_contents($fn) != $content)) {
			file_put_contents($fn, $content);
		}
	}

	return true;
} // processTable()

function getWhereClauseParams($table, $searchName, $search, $searchType, &$langKeys) {
	global $ALLOWED_NUMERIC_QUERY_OPERATORS, $ALLOWED_STRING_QUERY_OPERATORS;

	$haveAnyFulltextQueryOperators = false;
	$searchWhereClausePHP = '';
	$searchWhereClauseOr = '';
	$searchWhereClauseIndent = ($searchType == 'autocomplete') ? "\n\t\t\t" : "\n\t\t";
	$searchWhereClauseConcat = '';
	$searchWhereAssignments = array();
	$searchWhereAssignmentsIndent = ($searchType == 'autocomplete') ? "\t\t" : "\t";
	$searchableColumnsPHPArray = "array(\n";
	$searchableColumnsPHPArraySep = '';
	if (isset($search['searchableColumns'])) {
		foreach ($search['searchableColumns'] as $key=>$column) {
			$queryOperator = isset($column['queryOperator']) ? $column['queryOperator'] : '';
			if ($queryOperator == 'fulltext') {
				$haveAnyFulltextQueryOperators = true;
				break;
			}
		}
		foreach ($search['searchableColumns'] as $key=>$column) {
			$colName = isset($column['columnName']) ? $column['columnName'] : $key;

			$pfx = isset($column['tableAlias']) ? $column['tableAlias'] : 'pri';
			if ($pfx != '') $pfx = $pfx .= '.';

			$tableColName = $pfx.$colName;

			$title = isset($column['title']) ? $column['title'] : '';
			if ($title == '') $title = identifierToHumanReadable($colName);

			$sqlType = isset($column['sqlType']) ? $column['sqlType'] : '';

			$queryOperator = isset($column['queryOperator']) ? $column['queryOperator'] : '';

			switch ($sqlType) {
			case 'integer':
			case 'smallint':
			case 'bigint':
			case 'decimal':
				if (!in_array($queryOperator, $ALLOWED_NUMERIC_QUERY_OPERATORS)) {
					$queryOperator = '=';
				}
				if (isset($column['unsignedSearch']) && ($column['unsignedSearch'])) {
					if ($searchType == 'search') {
						$searchWhereClausePHP .= $searchWhereClauseIndent.$searchWhereClauseConcat.var_export_normal_precision($searchWhereClauseOr.'(? <> 0 and abs('.$tableColName.') '.$queryOperator.' ?)', true);
						if ($searchWhereClauseOr == '') $searchWhereClauseOr = ' or ';
						if ($searchWhereClauseConcat == '') $searchWhereClauseConcat = '.';
						$searchWhereAssignments[] = $searchWhereAssignmentsIndent."\$ps->setInt(((\$queryCol == '') || (\$queryCol == ".var_export_normal_precision($tableColName, true).")) ? 1 : 0);";
					} else {
						$searchWhereClausePHP .= $searchWhereClauseIndent.$searchWhereClauseConcat.var_export_normal_precision($searchWhereClauseOr.'abs('.$tableColName.') '.$queryOperator.' ?', true);
						if ($searchWhereClauseOr == '') $searchWhereClauseOr = ' or ';
						if ($searchWhereClauseConcat == '') $searchWhereClauseConcat = '.';
					}
					if ($sqlType == 'decimal') {
						$searchWhereAssignments[] = $searchWhereAssignmentsIndent."\$ps->setDouble(abs((double)trim(\$query)));";
					} else {
						$searchWhereAssignments[] = $searchWhereAssignmentsIndent."\$ps->setInt(abs((int)trim(\$query)));";
					}
				} else {
					if ($searchType == 'search') {
						$searchWhereClausePHP .= $searchWhereClauseIndent.$searchWhereClauseConcat.var_export_normal_precision($searchWhereClauseOr.'(? <> 0 and '.$tableColName.' '.$queryOperator.' ?)', true);
						if ($searchWhereClauseOr == '') $searchWhereClauseOr = ' or ';
						if ($searchWhereClauseConcat == '') $searchWhereClauseConcat = '.';
						$searchWhereAssignments[] = $searchWhereAssignmentsIndent."\$ps->setInt(((\$queryCol == '') || (\$queryCol == ".var_export_normal_precision($tableColName, true).")) ? 1 : 0);";
					} else {
						$searchWhereClausePHP .= $searchWhereClauseIndent.$searchWhereClauseConcat.var_export_normal_precision($searchWhereClauseOr.$tableColName.' '.$queryOperator.' ?', true);
						if ($searchWhereClauseOr == '') $searchWhereClauseOr = ' or ';
						if ($searchWhereClauseConcat == '') $searchWhereClauseConcat = '.';
					}
					if ($sqlType == 'decimal') {
						$searchWhereAssignments[] = $searchWhereAssignmentsIndent."\$ps->setDouble(\$query);";
					} else {
						$searchWhereAssignments[] = $searchWhereAssignmentsIndent."\$ps->setInt(\$query);";
					}
				}

				$langKey = $searchName.'_search.searchableColumn.'.$tableColName.'.title';
				if (is_array($langKeys)) $langKeys[$langKey] = $title;
				$searchableColumnsPHPArray .= sprintf(<<<EOF
%s\t\t(object)array(
\t\t\t'name'=>%s,
\t\t\t'pfx'=>%s,
\t\t\t'title'=>_t(%s, %s),
\t\t\t'sqlType'=>%s,
\t\t\t'queryOperator'=>%s,
\t\t),
EOF
					,$searchableColumnsPHPArraySep
					,var_export_normal_precision($colName, true)
					,var_export_normal_precision($pfx, true)
					,var_export_normal_precision($langKey, true)
					,var_export_normal_precision($title, true)
					,var_export_normal_precision($sqlType, true)
					,var_export_normal_precision($queryOperator, true)
				);
				if ($searchableColumnsPHPArraySep == '') $searchableColumnsPHPArraySep = "\n";
				break;
			case 'char':
			case 'varchar':
			case 'text':
				if (!in_array($queryOperator, $ALLOWED_STRING_QUERY_OPERATORS)) {
					$queryOperator = '=';
				}
				if (($queryOperator == 'beginsWith') ||
					($queryOperator == 'contains') ||
					($queryOperator == 'endsWith') ||
					($queryOperator == 'fulltext')) {
					if ($searchType == 'search') {
						$tmppfx = '(? <> 0 and (';
						$tmpsfx = '.\'))\'';
					} else {
						$tmppfx = $tmpsfx = '';
					}
					$searchWhereClausePHP .=
						$searchWhereClauseIndent.$searchWhereClauseConcat.
						((($searchWhereClauseOr != '') || ($tmppfx != '')) ? var_export_normal_precision($searchWhereClauseOr.$tmppfx, true).'.' : '');
					if ($queryOperator == 'fulltext') {
						$searchWhereClausePHP .=
							'($canDoFulltextSearch ? ('.
							var_export_normal_precision('? = \'\' or match('.$tableColName.') against (? in boolean mode)', true).
							') : (';
					}
					$searchWhereClausePHP .=
						'($db->hasCaseInsensitiveLike ? '.var_export_normal_precision($tableColName, true).
						' : '.
						var_export_normal_precision('lower('.$tableColName.')', true).')'.
						'.\' \'.$db->likeOperator.\' \'.'.
						'($db->hasCaseInsensitiveLike ? \'?\' : \'lower(?)\')';
					if ($queryOperator == 'fulltext') {
						$searchWhereClausePHP .= '))';
					}
					$searchWhereClausePHP .= $tmpsfx;
					if ($searchWhereClauseOr == '') $searchWhereClauseOr = ' or ';
					if ($searchWhereClauseConcat == '') $searchWhereClauseConcat = '.';
				} else {
					$searchWhereClausePHP .= $searchWhereClauseOr.'(? <> 0 and '.$tableColName.' '.$queryOperator.' ?)';
					if ($searchWhereClauseOr == '') $searchWhereClauseOr = ' or ';
					if ($searchWhereClauseConcat == '') $searchWhereClauseConcat = '.';
				}
				if ($searchType == 'search') {
					$searchWhereAssignments[] = $searchWhereAssignmentsIndent."\$ps->setInt(((\$queryCol == '') || (\$queryCol == ".var_export_normal_precision($tableColName, true).")) ? 1 : 0);";
				}
				if ($queryOperator == 'beginsWith') {
					$searchWhereAssignments[] = $searchWhereAssignmentsIndent."\$ps->setString(\$query.'%');";
				} else if ($queryOperator == 'contains') {
					$searchWhereAssignments[] = $searchWhereAssignmentsIndent."\$ps->setString('%'.\$query.'%');";
				} else if ($queryOperator == 'endsWith') {
					$searchWhereAssignments[] = $searchWhereAssignmentsIndent."\$ps->setString('%'.\$query);";
				} else if ($queryOperator == 'fulltext') {
					$searchWhereAssignments[] = $searchWhereAssignmentsIndent."if (\$canDoFulltextSearch) { \$ps->setString(\$ftquery); \$ps->setString(\$ftquery); } else { \$ps->setString('%'.\$query.'%'); }";
				} else {
					$searchWhereAssignments[] = $searchWhereAssignmentsIndent."\$ps->setString(\$query);";
				}

				$langKey = $searchName.'_search.searchableColumn.'.$tableColName.'.title';
				if (is_array($langKeys)) $langKeys[$langKey] = $title;
				$searchableColumnsPHPArray .= sprintf(<<<EOF
%s\t\t(object)array(
\t\t\t'name'=>%s,
\t\t\t'pfx'=>%s,
\t\t\t'title'=>_t(%s, %s),
\t\t\t'sqlType'=>%s,
\t\t\t'queryOperator'=>%s,
\t\t),
EOF
					,$searchableColumnsPHPArraySep
					,var_export_normal_precision($colName, true)
					,var_export_normal_precision($pfx, true)
					,var_export_normal_precision($langKey, true)
					,var_export_normal_precision($title, true)
					,var_export_normal_precision($sqlType, true)
					,var_export_normal_precision($queryOperator, true)
				);
				if ($searchableColumnsPHPArraySep == '') $searchableColumnsPHPArraySep = "\n";
				break;
			default:
				fprintf(STDERR, "WARNING: Invalid sqlType \"%s\" in searchable column \"%s\" in \"%s\" %s in %s table YAML file.\n", $sqlType, $tableColName, $searchName, $searchType, $table->tableName);
			}
		}
	}
	$searchableColumnsPHPArray .= "\n\t)";

	$andWhere = '';
	if (isset($search['andWhere'])) {
		$andWhere = trim((string)$search['andWhere']);
	}
	$andWhereAssignments = array();
	if (isset($search['andWhereAssignments']) && is_array($search['andWhereAssignments'])) {
		foreach ($search['andWhereAssignments'] as $assignment) {
			$expression = (isset($assignment['expression']) && is_string($assignment['expression'])) ?
				$assignment['expression'] : "''";
			switch (isset($assignment['psType']) ? $assignment['psType'] : 'string') {
			case 'boolean':
				$andWhereAssignments[] = "\t\$ps->setBoolean($expression);";
				break;
			case 'int':
				$andWhereAssignments[] = "\t\$ps->setInt($expression);";
				break;
			case 'float':
				$andWhereAssignments[] = "\t\$ps->setFloat($expression);";
				break;
			case 'double':
				$andWhereAssignments[] = "\t\$ps->setDouble($expression);";
				break;
			case 'string':
			default:
				$andWhereAssignments[] = "\t\$ps->setString($expression);";
				break;
			case 'match':
				$andWhereAssignments[] = "\t\$ps->setString('%'.$expression.'%');";
				break;
			case 'binary':
				$andWhereAssignments[] = "\t\$ps->setBinary($expression);";
				break;
			}
		}
	}
	return array(
		'haveAnyFulltextQueryOperators'=>$haveAnyFulltextQueryOperators,
		'searchWhereClausePHP'=>$searchWhereClausePHP,
		'searchWhereAssignments'=>$searchWhereAssignments,
		'searchableColumnsPHPArray'=>$searchableColumnsPHPArray,
		'searchableColumnsPHPArraySep'=>$searchableColumnsPHPArraySep,
		'andWhere'=>$andWhere,
		'andWhereAssignments'=>$andWhereAssignments,
	);
} // getWhereClauseParams()
