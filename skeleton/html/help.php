<?php
// DO NOT EDIT THIS FILE.
// This file is part of the Jax Framework.
// If you edit this file, your changes will be lost when framework updates are applied.

include dirname(__FILE__).'/jax/include/autoload.include.php';
include dirname(__FILE__).'/jax/include/l10n.include.php';
//loadResourceBundle(dirname(__FILE__).'/jax/resources/system');
//loadResourceBundle(dirname(__FILE__).'/resources/system');
//loadResourceBundle($_SERVER['SCRIPT_FILENAME']);

$params = array_merge($_GET, $_POST);
$path = isset($params['path']) ? $params['path'] : '';
if (($path == '') && isset($_SERVER['PATH_INFO']) && ($_SERVER['PATH_INFO'] != '')) {
	$path = $_SERVER['PATH_INFO'];
}

$path = fixPath($path);
$filepath = dirname(__FILE__).$path.'_help.html';

if (!file_exists($filepath)) notFound();
loadResourceBundle($filepath);
$html = localize(file_get_contents($filepath));

header('Content-Type: text/html');
header('Content-Length: '.strlen($html));
echo $html;
exit();

function fixPath($path) {
	$path = str_replace('\\', '/', $path);
	$path = trim($path, "/");
	$path = preg_replace('/\/+/', '/', $path);
	$pieces = explode('/', $path);
	for ($i = 0, $n = count($pieces); $i < $n;) {
		if ($pieces[$i] == '') {
			unset($pieces[$i]);
			$pieces = array_slice($pieces, 0);
			$n--;
			if ($i > 0) $i--;
		} else if ($pieces[$i] == '..') {
			unset($pieces[$i]);
			$pieces = array_slice($pieces, 0);
			$n--;
			if ($i > 0) $i--;

			unset($pieces[$i]);
			$pieces = array_slice($pieces, 0);
			$n--;
			if ($i > 0) $i--;
		} else {
			$i++;
		}
	}
	return '/'.$path;
}
function localize($html) {
	global $resourceStrings;

	$dom = new DOMDocument();
	$dom->loadHTML($html);

	$tmpdom = new DOMDocument();

	foreach ($resourceStrings as $id=>$htmlFragment) {
		// Try to find an element in the original document whose id matches the
		// localized string's key.  This will be the container element, and we
		// will replace its content with the localized string (which is HTML).
		if (($container = $dom->getElementById($id)) === null) continue;

		// Remove all children of the container element whose content we're replacing.
		while ($container->lastChild !== null) $container->removeChild($container->lastChild);

		// Build a temporary document from the replacement HTML fragment.
		// If the HTML fragment fails to load, remove all previously-existing children of
		// the temporary document.  We re-use the same temporary document for each
		// string (HTML fragment) we're replacing.
		if (!$tmpdom->loadHTML($htmlFragment)) {
			while ($tmpdom->lastChild !== null) $tmpdom->removeChild($tmpdom->lastChild);
		}

		// Find the first <body> element in the temporary document;
		// export its children as an XML fragment.
		$bodys = $tmpdom->getElementsByTagName('body');
		if ($bodys->length < 1) continue;
		$xml = '';
		foreach ($bodys->item(0)->childNodes as $child) $xml .= $tmpdom->saveXML($child);

		// In the original document, create a document fragment, load the replacement
		// XML fragment into it, and import it under the original container element.
		$frag = $dom->createDocumentFragment();
		$frag->appendXML($xml);
		$container->appendChild($dom->importNode($frag));
	}

	// Export the modified version of the original document as HTML, and return the HTML.
	return $dom->saveHTML();
}

function notFound() {
	header('HTTP/1.1 404 Not Found');
	echo '404 Not Found';
	exit();
}
