// DO NOT EDIT THIS FILE.
// This file is part of the Jax Framework.
// If you edit this file, your changes will be lost when framework updates are applied.

// Copyright (c) 2010-2014 Ronald B. Cemer
// All rights reserved.
// This software is released under the BSD license.
// Please see the accompanying LICENSE.txt for details.

// Given the array of column definitions for a DataTable (aoColumnDefs),
// find the column index for a specific column value name (sName).
function findDataTableColIdx(aoColumnDefs, sName) {
	for (var i = 0; i < aoColumnDefs.length; i++) {
		if (aoColumnDefs[i].sName == sName) return i;
	}
	return -1;
}

function findDataTableRowIdxForId(dataTable, idColIdx, idColumnValue) {
	var settings = dataTable.fnSettings();
	var numRowsDisplayed = settings.fnRecordsDisplay();
	for (var rowIdx = 0; rowIdx < numRowsDisplayed; rowIdx++) {
		var rowData = dataTable.fnGetData(rowIdx);
		if (rowData[idColIdx] == idColumnValue) {
			return rowData;
		}
	}
	return null;
}

// If you have a unique identifier value from a unique identifying column for a specific row
// which is currently displayed in a data table, and you want to retrieve the value for another
// column which is displayed on that same row, this function will let you do that.
// Given a DataTable instance (dataTable), the value name for the unique identifying column
// (idColumn_sName), the actual unique identifier value (idColumnValue) and the value name for
// the corresponding column whose value you wish to retrieve (otherColumn_sName), this function
// will search the currently displayed rows in the data table to find the first row which
// contains the unique identifying value you specified; if found, it will return the corresponding
// value for the column named by otherColumn_sName.
// If either of the named columns do not exist in the DataTable, or if the specified unique
// identifier value is not found in the specified unique identifier column of any of the rows
// which are currently shown in the table, this function returns null.
function getDataTableColumnValueForIdColumnValue(dataTable, idColumn_sName, idColumnValue, otherColumn_sName) {
	var settings = dataTable.fnSettings();
	var idColIdx = findDataTableColIdx(settings.aoColumns, idColumn_sName);
	var otherColIdx = findDataTableColIdx(settings.aoColumns, otherColumn_sName);
	if ((idColIdx >= 0) && (otherColIdx >= 0)) {
		var numRowsDisplayed = settings.fnRecordsDisplay();
		for (var rowIdx = 0; rowIdx < numRowsDisplayed; rowIdx++) {
			var rowData = dataTable.fnGetData(rowIdx);
			if (rowData[idColIdx] == idColumnValue) {
				return rowData[otherColIdx];
			}
		}
	}
	return null;
}

// Given an array of DataTable column definitions, return the HTML for the blank table header.
function getDataTableHeaderHTML(aoColumnDefs) {
	var html = '<thead><tr>';
	for (var i = 0; i < aoColumnDefs.length; i++) {
		html += '<th';
		if (typeof(aoColumnDefs[i].sHeaderClass) != 'undefined') {
			html += ' class="'+aoColumnDefs[i].sHeaderClass+'"';
		}
		if (typeof(aoColumnDefs[i].sWidth) != 'undefined') {
			html += ' width="'+aoColumnDefs[i].sWidth+'"';
		}
		html += '></th>';
	}
	html += '</tr></thead>';
	return html;
}

// Given an array of DataTable column definitions, return the HTML for the entire blank table.
function getDataTableHTML(tableId, aoColumnDefs) {
	var html =
		'<table cellpadding="0" cellspacing="1" border="0" class="display" id="'+tableId+'">'+
		getDataTableHeaderHTML(aoColumnDefs)+
 		'<tbody><tr><td colspan="'+aoColumnDefs.length+
		'" class="dataTables_empty">Loading data from server...</td>'+
		'</tr></tbody></table>';
	return html;
}

// Create a DataTable which gets its data by using AJAX requests.
function createAJAXDataTable(parentSelector, tableId, aoColumnDefs, ajaxURI) {
	var html = getDataTableHTML(tableId, aoColumnDefs);
	$(html).appendTo($(parentSelector));
	var dataTable = $('#'+tableId).dataTable({
		bProcessing: true,
		bServerSide: true,
		sAjaxSource: ajaxURI,
		sPaginationType: 'full_numbers',
		aoColumnDefs: aoColumnDefs
	});
}
